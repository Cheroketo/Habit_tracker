from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from models import habits

class AddHabitState(StatesGroup):
    waiting_for_name = State()

def register_habit_handlers(dp: Dispatcher):
    @dp.message_handler(commands=["addhabit"])
    async def add_habit_start(msg: types.Message):
        await msg.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:")
        await AddHabitState.waiting_for_name.set()

    @dp.message_handler(state=AddHabitState.waiting_for_name)
    async def save_habit(msg: types.Message, state: FSMContext):
        habits.add_habit(msg.from_user.id, msg.text.strip())
        await msg.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ")
        await state.finish()

    @dp.message_handler(commands=["list"])
    async def list_habits(msg: types.Message):
        user_habits = habits.get_user_habits(msg.from_user.id)
        if not user_habits:
            await msg.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫.")
            return
        reply = "\n".join([f"{hid}. {name}" for hid, name in user_habits])
        await msg.answer(f"–¢–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n{reply}")

    @dp.message_handler(commands=["done"])
    async def done(msg: types.Message):
        user_habits = habits.get_user_habits(msg.from_user.id)
        if not user_habits:
            await msg.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏.")
            return
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for hid, name in user_habits:
            keyboard.add(f"{hid}. {name}")
        await msg.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏:", reply_markup=keyboard)

    @dp.message_handler(lambda msg: "." in msg.text)
    async def mark_done(msg: types.Message):
        try:
            habit_id = int(msg.text.split(".")[0])
            success = habits.log_habit(habit_id)
            if success:
                await msg.answer("–û—Ç–º–µ—á–µ–Ω–æ ‚úÖ", reply_markup=types.ReplyKeyboardRemove())
            else:
                await msg.answer("–¢—ã —É–∂–µ –æ—Ç–º–µ—á–∞–ª —ç—Ç—É –ø—Ä–∏–≤—ã—á–∫—É —Å–µ–≥–æ–¥–Ω—è ü§ì", reply_markup=types.ReplyKeyboardRemove())
        except:
            await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

    @dp.message_handler(commands=["today"])
    async def today_done(msg: types.Message):
        logs = habits.get_today_logs(msg.from_user.id)
        if logs:
            await msg.answer("–°–µ–≥–æ–¥–Ω—è —Ç—ã —Å–¥–µ–ª–∞–ª:\n" + "\n".join(logs))
        else:
            await msg.answer("–¢—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª —Å–µ–≥–æ–¥–Ω—è üò¥")