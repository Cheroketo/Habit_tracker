from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import TOKEN
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import models
from analytics import plot_feelings_to_bytes


class FeelingsState(StatesGroup):
    waiting_for_energy = State()
    waiting_for_mood = State()
    waiting_for_stress = State()
    waiting_for_note = State()


bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

models.create_tables()

@dp.message_handler(commands=['start'])
async def start(msg: types.Message):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ç—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É"
                     "\n/list ‚Äî —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫\n/done ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ\
                    \n/today ‚Äî —á—Ç–æ —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª —Å–µ–≥–æ–¥–Ω—è"
                     "\n/feelings ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–π —Å–≤–æ–∏ –æ—â—É—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"
                     "\n/mystats ‚Äî –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ç–≤–æ–∏—Ö –æ—â—É—â–µ–Ω–∏–π (—ç–Ω–µ—Ä–≥–∏—è, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Å—Ç—Ä–µ—Å—Å) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"
                     "\n/habitstats <id>: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–æ –ø—Ä–∏–≤—ã—á–∫–µ "
                     "\n/graph - –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ —Ç–≤–æ–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é")

@dp.message_handler(commands=['add'])
async def add(msg: types.Message):
    await msg.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:")
    await dp.current_state(user=msg.from_user.id).set_state("waiting_for_habit")

@dp.message_handler(state="waiting_for_habit")
async def habit_name(msg: types.Message):
    models.add_habit(msg.from_user.id, msg.text)
    await msg.answer(f"–ü—Ä–∏–≤—ã—á–∫–∞ ¬´{msg.text}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await dp.current_state(user=msg.from_user.id).reset_state()

@dp.message_handler(commands=['list'])
async def list_habits(msg: types.Message):
    habits = models.get_user_habits(msg.from_user.id)
    if not habits:
        await msg.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å –∏—Ö —Å –ø–æ–º–æ—â—å—é /add")
        return
    response = "–¢–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n"
    for habit in habits:
        response += f"‚Ä¢ {habit[1]} (id: {habit[0]})\n"
    await msg.answer(response)

@dp.message_handler(commands=['done'])
async def done(msg: types.Message):
    habits = models.get_user_habits(msg.from_user.id)
    if not habits:
        await msg.answer("–ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏. –î–æ–±–∞–≤—å –∏—Ö —Å –ø–æ–º–æ—â—å—é /add")
        return

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for habit in habits:
        keyboard.add(KeyboardButton(f"{habit[1]} ({habit[0]})"))
    await msg.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é:", reply_markup=keyboard)
    await dp.current_state(user=msg.from_user.id).set_state("waiting_for_done")

@dp.message_handler(state="waiting_for_done")
async def mark_done(msg: types.Message):
    try:
        habit_id = int(msg.text.strip().split('(')[-1][:-1])
        result = models.log_habit(habit_id)  # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É

        if result:
            await msg.answer("–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ", reply_markup=types.ReplyKeyboardRemove())
        else:
            await msg.answer("–¢—ã —É–∂–µ –æ—Ç–º–µ—á–∞–ª —ç—Ç—É –ø—Ä–∏–≤—ã—á–∫—É —Å–µ–≥–æ–¥–Ω—è üòâ", reply_markup=types.ReplyKeyboardRemove())

    except Exception:
        await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤—ã–±—Ä–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞.")
    finally:
        await dp.current_state(user=msg.from_user.id).reset_state()



@dp.message_handler(commands=['today'])
async def today(msg: types.Message):
    logs = models.get_today_logs(msg.from_user.id)
    if not logs:
        await msg.answer("–°–µ–≥–æ–¥–Ω—è —Ç—ã –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª.")
        return
    response = "–°–µ–≥–æ–¥–Ω—è —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª:\n"
    response += "\n".join(f"‚úÖ {habit}" for habit in logs)
    await msg.answer(response)

@dp.message_handler(commands=['feelings'])
async def feelings_start(msg: types.Message):
    await msg.answer("–û—Ü–µ–Ω–∏ —Å–≤–æ—é —ç–Ω–µ—Ä–≥–∏—é –æ—Ç 0 –¥–æ 10:")
    await FeelingsState.waiting_for_energy.set()

@dp.message_handler(state=FeelingsState.waiting_for_energy)
async def feelings_energy(msg: types.Message, state: FSMContext):
    await state.update_data(energy=int(msg.text))
    await msg.answer("–¢–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 10:")
    await FeelingsState.waiting_for_mood.set()

@dp.message_handler(state=FeelingsState.waiting_for_mood)
async def feelings_mood(msg: types.Message, state: FSMContext):
    await state.update_data(mood=int(msg.text))
    await msg.answer("–¢–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∏ —Å—Ç—Ä–µ—Å—Å –æ—Ç 0 –¥–æ 10:")
    await FeelingsState.waiting_for_stress.set()

@dp.message_handler(state=FeelingsState.waiting_for_stress)
async def feelings_stress(msg: types.Message, state: FSMContext):
    await state.update_data(stress=int(msg.text))
    await msg.answer("–•–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å? (–ù–∞–ø–∏—à–∏ –∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç)")
    await FeelingsState.waiting_for_note.set()

@dp.message_handler(state=FeelingsState.waiting_for_note)
async def feelings_note(msg: types.Message, state: FSMContext):
    note = msg.text if msg.text != "-" else ""
    data = await state.get_data()

    models.log_feelings(
        user_id=msg.from_user.id,
        energy=data['energy'],
        mood=data['mood'],
        stress=data['stress'],
        note=note
    )

    await msg.answer("–ß—É–≤—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–∞–Ω—ã! üß†", reply_markup=types.ReplyKeyboardRemove())
    await state.finish()


@dp.message_handler(commands=['mystats'])
async def mystats(msg: types.Message):
    avg = models.get_average_feelings(msg.from_user.id)
    if not any(avg):
        await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ó–∞–ø–∏—à–∏ –æ—â—É—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ /feelings.")
        return
    energy, mood, stress = avg
    response = (
        f"–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n"
        f"‚ö° –≠–Ω–µ—Ä–≥–∏—è: {energy:.1f}\n"
        f"üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood:.1f}\n"
        f"üò∞ –°—Ç—Ä–µ—Å—Å: {stress:.1f}"
    )
    await msg.answer(response)


@dp.message_handler(commands=['habitstats'])
async def habitstats(msg: types.Message):
    args = msg.get_args()
    habits = models.get_user_habits(msg.from_user.id)
    if not habits:
        await msg.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π /add")
        return

    if not args:
        keyboard = InlineKeyboardMarkup(row_width=1)
        for habit_id, habit_name in habits:
            keyboard.add(InlineKeyboardButton(text=habit_name, callback_data=f"habitstats_{habit_id}"))
        await msg.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–∏–≤—ã—á–∫—É, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:", reply_markup=keyboard)
        return

    if args.isdigit():
        habit_id = int(args)
        await send_habit_stats(msg, habit_id)
    else:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /habitstats <id> –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ /habitstats –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.")

async def send_habit_stats(event, habit_id: int):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id
    if hasattr(event, 'from_user'):
        user_id = event.from_user.id
    elif hasattr(event, 'message') and event.message.from_user:
        user_id = event.message.from_user.id
    else:
        return

    stats = models.get_habit_stats(user_id, habit_id)
    if not stats:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ event
        if hasattr(event, 'answer') and callable(event.answer):  # CallbackQuery
            await event.answer("–ü—Ä–∏–≤—ã—á–∫–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:  # Message
            await event.answer("–ü—Ä–∏–≤—ã—á–∫–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    habit_name, days_done, total_days, pct = stats
    response = (
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–≤—ã—á–∫–µ ¬´{habit_name}¬ª:\n"
        f"–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ {days_done} –¥–Ω—è—Ö –∏–∑ {total_days} ({pct:.1f}%)"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ event
    if hasattr(event, 'message') and hasattr(event.message, 'answer'):  # CallbackQuery
        await event.message.answer(response)
    elif hasattr(event, 'answer'):  # Message
        await event.answer(response)
    else:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
        pass


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('habitstats_'))
async def process_habitstats_callback(callback_query: types.CallbackQuery):
    habit_id = int(callback_query.data.split('_')[1])
    await send_habit_stats(callback_query, habit_id)
    await callback_query.answer()


@dp.message_handler(commands=['graph'])
async def graph(msg: types.Message):
    img_buf = plot_feelings_to_bytes(msg.from_user.id)
    if img_buf is None:
        await msg.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        return

    await msg.answer_photo(photo=img_buf, caption="–¢–≤–æ–∏ –æ—â—É—â–µ–Ω–∏—è –∑–∞ –º–µ—Å—è—Ü")

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
