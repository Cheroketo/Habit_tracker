from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
import models
import os

from config import TOKEN

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

models.create_tables()

@dp.message_handler(commands=['start'])
async def start(msg: types.Message):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ç—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É\n/list ‚Äî —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫\n/done ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ\n/today ‚Äî —á—Ç–æ —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª —Å–µ–≥–æ–¥–Ω—è")

@dp.message_handler(commands=['add'])
async def add(msg: types.Message):
    await msg.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:")
    await dp.current_state(user=msg.from_user.id).set_state("waiting_for_habit")

@dp.message_handler(state="waiting_for_habit")
async def habit_name(msg: types.Message):
    models.add_habit(msg.from_user.id, msg.text)
    await msg.answer(f"–ü—Ä–∏–≤—ã—á–∫–∞ ¬´{msg.text}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await dp.current_state(user=msg.from_user.id).reset_state()

@dp.message_handler(commands=['list'])
async def list_habits(msg: types.Message):
    habits = models.get_user_habits(msg.from_user.id)
    if not habits:
        await msg.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å –∏—Ö —Å –ø–æ–º–æ—â—å—é /add")
        return
    response = "–¢–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n"
    for habit in habits:
        response += f"‚Ä¢ {habit[1]} (id: {habit[0]})\n"
    await msg.answer(response)

@dp.message_handler(commands=['done'])
async def done(msg: types.Message):
    habits = models.get_user_habits(msg.from_user.id)
    if not habits:
        await msg.answer("–ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏. –î–æ–±–∞–≤—å –∏—Ö —Å –ø–æ–º–æ—â—å—é /add")
        return

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for habit in habits:
        keyboard.add(KeyboardButton(f"{habit[1]} ({habit[0]})"))
    await msg.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é:", reply_markup=keyboard)
    await dp.current_state(user=msg.from_user.id).set_state("waiting_for_done")

@dp.message_handler(state="waiting_for_done")
async def mark_done(msg: types.Message):
    try:
        habit_id = int(msg.text.strip().split('(')[-1][:-1])
        result = models.log_habit(habit_id)  # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É

        if result:
            await msg.answer("–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ", reply_markup=types.ReplyKeyboardRemove())
        else:
            await msg.answer("–¢—ã —É–∂–µ –æ—Ç–º–µ—á–∞–ª —ç—Ç—É –ø—Ä–∏–≤—ã—á–∫—É —Å–µ–≥–æ–¥–Ω—è üòâ", reply_markup=types.ReplyKeyboardRemove())

    except Exception:
        await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤—ã–±—Ä–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞.")
    finally:
        await dp.current_state(user=msg.from_user.id).reset_state()



@dp.message_handler(commands=['today'])
async def today(msg: types.Message):
    logs = models.get_today_logs(msg.from_user.id)
    if not logs:
        await msg.answer("–°–µ–≥–æ–¥–Ω—è —Ç—ã –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª.")
        return
    response = "–°–µ–≥–æ–¥–Ω—è —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª:\n"
    response += "\n".join(f"‚úÖ {habit}" for habit in logs)
    await msg.answer(response)

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
