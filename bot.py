import logging
import sqlite3
import re
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage


import models
from models import create_tables, add_habit, get_user_habits, log_habit, get_today_logs, set_reminder_time, get_habit_stats
from analytics import plot_feelings_to_bytes
from scheduler import start_scheduler, schedule_user_reminder, scheduler
from config import TOKEN
from aiogram.dispatcher import FSMContext




API_TOKEN = TOKEN  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# === –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ ===
@dp.message_handler(commands=['start'])
async def start_cmd(msg: types.Message):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π —Ç—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫ –∏ –ø–æ–º–æ—â–Ω–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π /addhabit, /done, /today, /feelings, /graph –∏ /remindme HH:MM")

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ ===
@dp.message_handler(commands=['addhabit'])
async def addhabit(msg: types.Message):
    args = msg.get_args()
    if not args:
        await msg.answer("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /addhabit –ó–∞—Ä—è–¥–∫–∞")
        return
    add_habit(msg.from_user.id, args.strip())
    await msg.answer(f"–ü—Ä–∏–≤—ã—á–∫–∞ '{args.strip()}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ")

# === –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é ===
@dp.message_handler(commands=['done'])
async def done(msg: types.Message):
    habits = get_user_habits(msg.from_user.id)
    if not habits:
        await msg.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å —á–µ—Ä–µ–∑ /addhabit")
        return
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for h in habits:
        keyboard.add(h[1])
    await msg.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–∏–≤—ã—á–∫—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã–ø–æ–ª–Ω–∏–ª:", reply_markup=keyboard)
    await dp.current_state(user=msg.from_user.id).set_state("waiting_for_done")

@dp.message_handler(state="waiting_for_done")
async def handle_done(msg: types.Message):
    habits = get_user_habits(msg.from_user.id)
    selected = msg.text.strip()
    habit_dict = {name: hid for hid, name in habits}
    if selected not in habit_dict:
        await msg.answer("–ù–µ –ø–æ–Ω—è–ª. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return
    result = log_habit(habit_dict[selected])
    if result:
        await msg.answer("–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ", reply_markup=types.ReplyKeyboardRemove())
    else:
        await msg.answer("–¢—ã —É–∂–µ –æ—Ç–º–µ—á–∞–ª —ç—Ç—É –ø—Ä–∏–≤—ã—á–∫—É —Å–µ–≥–æ–¥–Ω—è üòâ", reply_markup=types.ReplyKeyboardRemove())
    await dp.current_state(user=msg.from_user.id).finish()

# === –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ===
@dp.message_handler(commands=['today'])
async def today(msg: types.Message):
    done = get_today_logs(msg.from_user.id)
    if not done:
        await msg.answer("–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–º–µ—á–µ–Ω–æ ‚ùå")
    else:
        await msg.answer("–°–µ–≥–æ–¥–Ω—è —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª:" + "\n".join(f"‚úÖ {h}" for h in done))

# === –ì—Ä–∞—Ñ–∏–∫ –æ—â—É—â–µ–Ω–∏–π ===
@dp.message_handler(commands=['graph'])
async def graph(msg: types.Message):
    img_buf = plot_feelings_to_bytes(msg.from_user.id)
    if img_buf is None:
        await msg.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –ó–∞–ø–∏—à–∏ –æ—â—É—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ /feelings.")
        return
    await msg.answer_photo(photo=img_buf, caption="–í–æ—Ç —Ç–≤–æ–∏ –æ—â—É—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü.")

@dp.message_handler(commands=['list'])
async def list_habits(msg: types.Message):
    habits = get_user_habits(msg.from_user.id)
    if not habits:
        await msg.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å —á–µ—Ä–µ–∑ /addhabit")
        return
    text = "–¢–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n"
    for hid, name in habits:
        text += f"- {name} (ID: {hid})\n"
    await msg.answer(text)

@dp.message_handler(commands=['mystats'])
async def mystats(msg: types.Message):
    args = msg.get_args().strip()
    if not args.isdigit():
        await msg.answer("–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /mystats ID_–ø—Ä–∏–≤—ã—á–∫–∏\n–ù–∞–ø—Ä–∏–º–µ—Ä: /mystats 2")
        return
    habit_id = int(args)

    result = get_habit_stats(msg.from_user.id, habit_id)
    if not result:
        await msg.answer("–ü—Ä–∏–≤—ã—á–∫–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –æ–Ω–∞ –Ω–µ —Ç–≤–æ—è.")
        return

    habit_name, days_done, total_days, pct = result
    await msg.answer(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–≤—ã—á–∫–µ ¬´{habit_name}¬ª:\n"
                     f"–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ {days_done} –¥–Ω—è—Ö –∏–∑ {total_days} ({pct:.1f}%)")


# === –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ===
@dp.message_handler(commands=['remindme'])
async def remindme(msg: types.Message):
    args = msg.get_args().strip()
    if not re.match(r"^\d{1,2}:\d{2}$", args):
        await msg.answer("–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: /remindme HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä: /remindme 21:00")
        return
    hour, minute = map(int, args.split(":"))
    if not (0 <= hour < 24 and 0 <= minute < 60):
        await msg.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç 00:00 –¥–æ 23:59")
        return
    set_reminder_time(msg.from_user.id, args)
    schedule_user_reminder(msg.from_user.id, bot)
    await msg.answer(f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {args}.")

# === –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ===
@dp.message_handler(commands=['stopreminder'])
async def stop_reminder(msg: types.Message):
    user_id = msg.from_user.id
    job_id = f"reminder_{user_id}"
    try:
        scheduler.remove_job(job_id)
    except Exception:
        pass
    with sqlite3.connect(models.DB_NAME) as conn:
        conn.execute("DELETE FROM reminders WHERE user_id = ?", (user_id,))
        conn.commit()
    await msg.answer("üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.")


from aiogram.dispatcher.filters.state import StatesGroup, State

class FeelingsForm(StatesGroup):
    energy = State()
    mood = State()
    stress = State()
    note = State()

@dp.message_handler(commands=['feelings'])
async def feelings_start(msg: types.Message):
    await msg.answer("–û—Ü–µ–Ω–∏ —Å–≤–æ—é *—ç–Ω–µ—Ä–≥–∏—é* –æ—Ç 1 –¥–æ 10:")
    await FeelingsForm.energy.set()



@dp.message_handler(state=FeelingsForm.energy)
async def process_energy(msg: types.Message, state: FSMContext):
    try:
        val = int(msg.text)
        if val < 1 or val > 10:
            raise ValueError()
    except:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏.")
        return
    await state.update_data(energy=val)
    await msg.answer("–¢–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∏ —Å–≤–æ—ë *–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ* –æ—Ç 1 –¥–æ 10:")
    await FeelingsForm.next()  # mood

@dp.message_handler(state=FeelingsForm.mood)
async def process_mood(msg: types.Message, state: FSMContext):
    try:
        val = int(msg.text)
        if val < 1 or val > 10:
            raise ValueError()
    except:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.")
        return
    await state.update_data(mood=val)
    await msg.answer("–û—Ü–µ–Ω–∏ —É—Ä–æ–≤–µ–Ω—å *—Å—Ç—Ä–µ—Å—Å–∞* –æ—Ç 1 –¥–æ 10:")
    await FeelingsForm.next()  # stress

@dp.message_handler(state=FeelingsForm.stress)
async def process_stress(msg: types.Message, state: FSMContext):
    try:
        val = int(msg.text)
        if val < 1 or val > 10:
            raise ValueError()
    except:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 –¥–ª—è —Å—Ç—Ä–µ—Å—Å–∞.")
        return
    await state.update_data(stress=val)
    await msg.answer("–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç':")
    await FeelingsForm.next()  # note

@dp.message_handler(state=FeelingsForm.note)
async def process_note(msg: types.Message, state: FSMContext):
    note_text = msg.text.strip()
    if note_text.lower() == '–Ω–µ—Ç':
        note_text = ""

    data = await state.get_data()
    energy = data['energy']
    mood = data['mood']
    stress = data['stress']

    # –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É
    models.log_feelings(msg.from_user.id, energy, mood, stress, note_text)

    await msg.answer("–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–∏ –æ—â—É—â–µ–Ω–∏—è –∑–∞–ø–∏—Å–∞–Ω—ã ‚úÖ")
    await state.finish()


@dp.message_handler(commands=['help'])
async def help_cmd(msg: types.Message):
    text = (
        "üìù *–¢—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫ ‚Äî —á—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:*\n\n"
        "/addhabit –ù–∞–∑–≤–∞–Ω–∏–µ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫\n"
        "/done ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Å–µ–≥–æ–¥–Ω—è\n"
        "/today ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª —Å–µ–≥–æ–¥–Ω—è\n"
        "/feelings ‚Äî –∑–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –æ—â—É—â–µ–Ω–∏—è (–ø–æ —à–∫–∞–ª–µ 1‚Äì10)\n"
        "/graph ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ç–≤–æ–∏—Ö –æ—â—É—â–µ–Ω–∏–π –∑–∞ –º–µ—Å—è—Ü\n"
        "/mystats ID ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∏–≤—ã—á–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /mystats 2)\n"
        "/remindme HH:MM ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /remindme 21:00)\n"
        "/stopreminder ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—ã, —è –ø–æ–º–æ–≥—É!"
    )
    await msg.answer(text, parse_mode='Markdown')


async def on_startup(dp):
    start_scheduler()
    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    with sqlite3.connect("habits.db") as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM reminders")
        for row in cursor.fetchall():
            schedule_user_reminder(row[0], bot)

if __name__ == '__main__':
    create_tables()
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)